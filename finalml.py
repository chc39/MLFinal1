# -*- coding: utf-8 -*-
"""FinalML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JdLvCECsGH3ejbC6QG7mLP_PFRowli1g
"""

from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from keras.utils import to_categorical
from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
import tensorflow as tf

import cv2                  
import numpy as np  
from tqdm import tqdm
import os                   
from random import shuffle  
from zipfile import ZipFile
from PIL import Image

#/Users/charlieclarke/Downloads
X=[]
Z=[]
IMG_SIZE=150
DAISY_DIR='/content/drive/MyDrive/flowers/daisy'
SUNFLOWER_DIR='/content/drive/MyDrive/flowers/sunflower'
TULIP_DIR='/content/drive/MyDrive/flowers/tulip'
DANDI_DIR='/content/drive/MyDrive/flowers/dandelion'
ROSE_DIR='/content/drive/MyDrive/flowers/rose'

#model selection
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from keras.utils import to_categorical


from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
import tensorflow as tf
import cv2                  
import numpy as np  
from tqdm import tqdm
import os                   
from random import shuffle  
from zipfile import ZipFile
from PIL import Image

#/Users/charlieclarke/Downloads
X=[]
Z=[]
IMG_SIZE=150
DAISY_DIR='/content/drive/MyDrive/flowers/daisy'
SUNFLOWER_DIR='/content/drive/MyDrive/flowers/sunflower'
TULIP_DIR='/content/drive/MyDrive/flowers/tulip'
DANDI_DIR='/content/drive/MyDrive/flowers/dandelion'
ROSE_DIR='/content/drive/MyDrive/flowers/rose'


def data_org(flower_type,DIR):
    for img in tqdm(os.listdir(DIR)):
        path = os.path.join(DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        X.append(np.array(img))
        Z.append(str(flower_type))



data_org('Daisy',DAISY_DIR)
data_org('Sunflower',SUNFLOWER_DIR)
data_org('Tulip',TULIP_DIR)
data_org('Dandelion',DANDI_DIR)
data_org('Rose',ROSE_DIR)
#variable # of images for each flower type

import matplotlib.pyplot as plt
import random as rn
fig, axes = plt.subplots(3, 2, figsize=(15, 15))

l1=rn.randint(0,len(Z))
axes[0,0].imshow(X[l1]) 
axes[0,0].set_title(Z[l1])

l2=rn.randint(0,len(Z))
axes[1,0].imshow(X[l2]) 
axes[1,0].set_title(Z[l2])

l3=rn.randint(0,len(Z))
axes[2,0].imshow(X[l3]) 
axes[2,0].set_title(Z[l3])


l4=rn.randint(0,len(Z))
axes[0,1].imshow(X[l4]) 
axes[0,1].set_title(Z[l4])

l5=rn.randint(0,len(Z))
axes[1,1].imshow(X[l5]) 
axes[1,1].set_title(Z[l5])

l6=rn.randint(0,len(Z))
axes[2,1].imshow(X[l6]) 
axes[2,1].set_title(Z[l6])



#model selection
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder

#preprocess.
from keras.preprocessing.image import ImageDataGenerator

#dl libraraies
from keras import backend as K
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from keras.utils import to_categorical

# specifically for cnn
from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
 
import tensorflow as tf

import cv2                  
import numpy as np  
from tqdm import tqdm
import os                   
from random import shuffle  
from zipfile import ZipFile
from PIL import Image

#/Users/charlieclarke/Downloads
X=[]
Z=[]
IMG_SIZE=150
DAISY_DIR='/content/drive/MyDrive/flowers/daisy'
SUNFLOWER_DIR='/content/drive/MyDrive/flowers/sunflower'
TULIP_DIR='/content/drive/MyDrive/flowers/tulip'
DANDI_DIR='/content/drive/MyDrive/flowers/dandelion'
ROSE_DIR='/content/drive/MyDrive/flowers/rose'


def data_org(flower_type,DIR):
    for img in tqdm(os.listdir(DIR)):
        path = os.path.join(DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        X.append(np.array(img))
        Z.append(str(flower_type))



data_org('Daisy',DAISY_DIR)
data_org('Sunflower',SUNFLOWER_DIR)
data_org('Tulip',TULIP_DIR)
data_org('Dandelion',DANDI_DIR)
data_org('Rose',ROSE_DIR)
#variable # of images for each flower type

import matplotlib.pyplot as plt
import random as rn
fig, axes = plt.subplots(3, 2, figsize=(15, 15))

l1=rn.randint(0,len(Z))
axes[0,0].imshow(X[l1]) 
axes[0,0].set_title(Z[l1])

l2=rn.randint(0,len(Z))
axes[1,0].imshow(X[l2]) 
axes[1,0].set_title(Z[l2])

l3=rn.randint(0,len(Z))
axes[2,0].imshow(X[l3]) 
axes[2,0].set_title(Z[l3])


l4=rn.randint(0,len(Z))
axes[0,1].imshow(X[l4]) 
axes[0,1].set_title(Z[l4])

l5=rn.randint(0,len(Z))
axes[1,1].imshow(X[l5]) 
axes[1,1].set_title(Z[l5])

l6=rn.randint(0,len(Z))
axes[2,1].imshow(X[l6]) 
axes[2,1].set_title(Z[l6])




#model selection
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder
from keras import backend as K
from keras.models import Sequential
from keras.layers import Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from keras.utils import to_categorical
from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
 
import tensorflow as tf


le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,5)
X=np.array(X)
#print(X)
#print("now")
X=X/255
#print(X)

np.random.seed(42)
rn.seed(42)
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)


datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image 
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images


datagen.fit(x_train)



from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

batch_size=64
epochs=25

model = Sequential()
model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
 
model.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dense(5, activation = "softmax"))

model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()



#reS = model.fit(datagen.flow(x_train,y_train, batch_size=batch_size),
                        #     epochs = epochs, validation_data = (x_test,y_test),
                            # verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)

plt.plot(reS2.history['loss'])
plt.plot(reS2.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

plt.plot(reS2.history['accuracy'])
plt.plot(reS2.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

epoch_number = 25

print("Train Accuracy", reS1.history['accuracy'][epoch_number])
print("Test Accuracy",reS1.history['val_accuracy'][epoch_number])
print("Train Loss",reS1.history['loss'][epoch_number])
print("Test Loss",reS1.history['val_loss'][epoch_number])

batch_size=128
epochs=50

model1 = Sequential()

model1.add(Conv2D(filters=32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(150, 150, 3)))
model1.add(MaxPooling2D(pool_size=(2, 2)))

model1.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model1.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model1.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model1.add(Flatten())
model1.add(Dense(512, activation='relu'))
model1.add(Dense(5, activation='softmax'))

model1.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])

model1.summary()

reS1 = model1.fit(datagen.flow(x_train,y_train, batch_size=batch_size),
                             epochs = epochs, validation_data = (x_test,y_test),
                             verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)

batch_size=128
epochs=50

model2 = Sequential()

model2.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(150, 150, 3)))
model2.add(MaxPooling2D(pool_size=(2, 2)))

model2.add(Conv2D(filters=64, kernel_size=(5, 5), padding='same', activation='relu'))
model2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model2.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model2.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model2.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model2.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model2.add(Flatten())
model2.add(Dense(512, activation='relu'))
model2.add(Dense(256, activation='relu'))
model2.add(Dense(5, activation='softmax'))

model2.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])

model2.summary()

reS2 = model2.fit(datagen.flow(x_train,y_train, batch_size=batch_size),
                             epochs = epochs, validation_data = (x_test,y_test),
                             verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)

le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,5)
X=np.array(X)
#print(X)
#print("now")
X=X/255
#print(X)

np.random.seed(42)
rn.seed(42)
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image 
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images


datagen.fit(x_train)

from keras.callbacks import ReduceLROnPlateau
red_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)

"""# Model Creation"""

from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

batch_size=128
epochs=50


clsf = Sequential()
clsf.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(150, 150, 3), activation='relu'))
clsf.add(MaxPooling2D(pool_size=(2, 2)))
clsf.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
clsf.add(MaxPooling2D(pool_size=(2, 2)))
clsf.add(Flatten())
clsf.add(Dense(units=128, activation='relu'))
clsf.add(Dense(units=4, activation='softmax'))
clsf.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
#aclsf.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])
clsf.summary()

clsf_info = clsf.fit(datagen.flow(x_train,y_train, batch_size=batch_size),
                             epochs = epochs, validation_data = (x_test,y_test),
                             verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)

batch_size=128
epochs=50

model = Sequential()
model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
 
model.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dense(5, activation = "softmax"))

import numpy as np
import matplotlib.pyplot as plt

# Assuming you have the test images stored in the 'x_test' variable

# Perform predictions on the test set
predictions = model2.predict(x_test)

# Convert predictions to class labels
predicted_labels = np.argmax(predictions, axis=1)

# Get the true labels
true_labels = np.argmax(y_test, axis=1)

# Find indices of correct and incorrect predictions
correct_indices = np.where(predicted_labels == true_labels)[0]
incorrect_indices = np.where(predicted_labels != true_labels)[0]

# Print an example of correct prediction
correct_index = correct_indices[1]
correct_image = x_test[correct_index]
correct_label = predicted_labels[correct_index]
true_label = true_labels[correct_index]
print("Correctly predicted example:")
print("Predicted label:", correct_label)
print("True label:", true_label)

# Display the correct image
plt.imshow(correct_image)
plt.title(f"Predicted: {correct_label}, True: {true_label}")
plt.axis("off")
plt.show()

# Print an example of incorrect prediction
incorrect_index = incorrect_indices[1]
incorrect_image = x_test[incorrect_index]
incorrect_label = predicted_labels[incorrect_index]
true_label = true_labels[incorrect_index]
print("Incorrectly predicted example:")
print("Predicted label:", incorrect_label)
print("True label:", true_label)

# Display the incorrect image
plt.imshow(incorrect_image)
plt.title(f"Predicted: {incorrect_label}, True: {true_label}")
plt.axis("off")
plt.show()

batch_size=128
epochs=50

model = Sequential()

model.add(Conv2D(filters=32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(5, activation='softmax'))

model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

reS = model.fit(datagen.flow(x_train,y_train, batch_size=batch_size),
                             epochs = epochs, validation_data = (x_test,y_test),
                             verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)

weights = None
layer_counter = 0
for layer in model.layers:
    if len(layer.get_weights()) > 0:
        weights = layer.get_weights()[0]
        layer_name = layer.name
        break
    layer_counter += 1
if weights is not None:
    weights_min = np.min(weights)
    weights_max = np.max(weights)
    weights = (weights - weights_min) / (weights_max - weights_min)
    fig, axs = plt.subplots(4,8, figsize=(20,20))
    fig.suptitle(f'Kernels of layer {layer_counter} - {layer_name}', fontsize=20)
    for i in range(weights.shape[-1]):
        ax = axs[i//8, i%8]
        ax.imshow(weights[:,:,0,i], cmap='gray', interpolation='nearest')
        ax.axis('off')
    plt.show()
else:
    print("No weights found in the model.")

plt.plot(reS.history['loss'])
plt.plot(reS.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

print(reS.history)

plt.plot(reS.history['accuracy'])
plt.plot(reS.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

